<?php
/**
 * @file
 * Bootstrap sub-theme.
 *
 * Place your custom PHP code in this file.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Template\Attribute;
use Drupal\taxonomy\Entity\Term;

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
global $base_url;
$theme_root = $base_url.'/'.drupal_get_path('theme','byu_theme');

function byu_theme_preprocess_page(&$variables) {
  global $base_url;
  $theme_root = $base_url.'/'.drupal_get_path('theme','byu_theme');
  $variables['theme_root'] = $theme_root;
  $byu_theme_root = '/'.drupal_get_path('theme','byu_theme');
  $variables['byu_theme_root'] = $byu_theme_root;
  $user = \Drupal::currentUser()->id();
  $account = \Drupal\user\Entity\User::load($user);
  $name = $account->getUsername();
  if($user){
    $user = \Drupal\user\Entity\User::load(\Drupal::currentUser()->id());
    if($user->get('user_picture')->entity){
      $picture = $user->get('user_picture')->entity->url();
    }
  }
  $current_path = \Drupal::service('path.current')->getPath();
  $path_args = explode('/', $current_path);
  $variables['arg'] = $path_args[1];

  //setting proper cache context for users
  $variables['#cache']['contexts'][] = 'user';

  $version = trim(theme_get_setting('components_version'));
  if(!empty($version ) ) {

    if ($version == 'master') {
      $variables['#attached']['library'][] = 'byu_theme/components-master';
    } elseif ($version == 'latest') {
      $variables['#attached']['library'][] = 'byu_theme/components-latest';
    } elseif ($version == '2.x.x') {
      $variables['#attached']['library'][] = 'byu_theme/components-2.x.x';
    } elseif ($version == 'none') {
      // don't attach components at all
    }

    $variables['#attached']['library'][] = 'byu_theme/custom-library';
  } else { // setting wasn't set yet
    $variables['#attached']['library'][] = 'byu_theme/components-2.x.x';
  }

  /* --- Load Fonts ------- */
  $variables['#attached']['library'][] = 'byu_theme/fonts-ringside';
  $variables['#attached']['library'][] = 'byu_theme/fonts-publicsans';
  $fontawesome_use = trim(theme_get_setting('fontawesome_use'));
  if($fontawesome_use == TRUE ) {
    $variables['#attached']['library'][] = 'byu_theme/font-awesome';
  }
  $librebaskerville_use = trim(theme_get_setting('librebaskerville_use'));
  if($librebaskerville_use == TRUE ) {
    $variables['#attached']['library'][] = 'byu_theme/librebaskerville';
  }
  $sourcesans_use = trim(theme_get_setting('sourcesans_use'));
  if($sourcesans_use == TRUE ) {
    $variables['#attached']['library'][] = 'byu_theme/sourcesans';
  }

  /* ------ Load Helper Styles --------- */
  $byu_buttons = trim(theme_get_setting('byu_buttons'));
  if($byu_buttons == TRUE ) {
    $variables['#attached']['library'][] = 'byu_theme/byu-buttons';
  }
  $byu_tables = trim(theme_get_setting('byu_tables'));
  if($byu_tables == TRUE ) {
    $variables['#attached']['library'][] = 'byu_theme/byu-tables';
  }
  $byu_box_shadows = trim(theme_get_setting('byu_box_shadows'));
  if($byu_box_shadows == TRUE ) {
    $variables['#attached']['library'][] = 'byu_theme/byu-box-shadows';
  }




  $userOb = $variables['user'];

  // Load the site name out of configuration.
  $config = \Drupal::config('system.site');
  $variables['site_name'] = $config->get('name');

  $variables['page_title'] = $variables['page']['#title'];
  $variables['clients_top'] = views_embed_view('client', 'block_4');
  $variables['current_url'] = $_SERVER['REQUEST_URI'];
  $theme_root = $base_url.'/'.drupal_get_path('theme','byu_theme');
  $variables['theme_root'] = $theme_root;
  $libraries['#attached']['library'][] = 'herchel/global-styling';

  $variables['logopath'] = file_url_transform_relative(file_create_url(theme_get_setting('logo.url')));


  /* -- Load Theme settings ---- */
  $variables['header_option'] = theme_get_setting('header_option');
  $variables['subtitle_use'] = theme_get_setting('subtitle_use'); // t/f
  $variables['subtitle_above'] = theme_get_setting('subtitle_above'); // t/f
  $variables['subtitle_italic'] = theme_get_setting('subtitle_italic'); // t/f

  $variables['subtitle_text'] = theme_get_setting('subtitle_text'); // text

  // sign in
  $variables['login_use'] = theme_get_setting('login_use'); // t/f
  $variables['login_url'] = theme_get_setting('login_url');
  $variables['logout_url'] = theme_get_setting('logout_url');
  // my account stuff here
  $variables['myaccount_use'] = theme_get_setting('myaccount_use'); // t/f
  $variables['myaccount_url'] = theme_get_setting('myaccount_url');

  // search
  $variables['search_use'] = theme_get_setting('search_use');
  $variables['search_submit'] = theme_get_setting('search_submit');
  $variables['search_input'] = theme_get_setting('search_input');
  // menu
  $variables['menu_disable'] = theme_get_setting('menu_disable');
  $variables['transparent'] = theme_get_setting('transparent');

  // hero
  $hero_setting = theme_get_setting('hero_width');
  if($hero_setting == '0') {
    $variables['hero_width'] = 'full-width';
  } else {
    $variables['hero_width'] = 'custom-width';
  }

  $hero_image_setting = theme_get_setting('hero_image_width');
  if($hero_image_setting == '0') {
    $variables['hero_image_width'] = '';
  } else {
    $variables['hero_image_width'] = 'full-width-images';
  }

  $hero_behind_setting = theme_get_setting('hero_vs_menu');
  if($hero_behind_setting == '0') {
    $variables['hero_vs_menu'] = 'hero-below-menu';
  } else {
    $variables['hero_vs_menu'] = 'hero-behind-menu';
  }

  // general page settings
  $variables['full_width'] = theme_get_setting('full_width');
  $variables['custom_width'] = theme_get_setting('custom_width');

  $page_min_setting = theme_get_setting('min_page_height');
  if($page_min_setting == 'none') {
    $variables['min_page_height'] = 'no-min-height';
  } elseif ($page_min_setting == '300') {
    $variables['min_page_height'] = 'min-height-300';
  } else {
    $variables['min_page_height'] = 'min-height-500';
  }

  $variables['footer_option'] = theme_get_setting('footer_option');
  $variables['footer_sticky'] = theme_get_setting('footer_sticky');
  //    $variables['footer_color_option'] = theme_get_setting('footer_color_option');
  $variables['header_sticky_option'] = theme_get_setting('header_sticky_option');
  $variables['page_header_option'] = theme_get_setting('page_header_option');
  $variables['page_header_color_option'] = theme_get_setting('page_header_color_option');
  $variables['below_slider_option'] = theme_get_setting('below_slider_option');
  $variables['navigation_option'] =  theme_get_setting('navigation_option');
  $variables['contact_option'] =  theme_get_setting('contact_option');
  $variables['contact_about_link'] =  theme_get_setting('contact_about_link');
  $variables['contact_about'] =  theme_get_setting('contact_about');
  $variables['contact_us_link'] =  theme_get_setting('contact_us_link');
  $variables['contact_us'] =  theme_get_setting('contact_us');
  $variables['breadcrumbs'] =  theme_get_setting('breadcrumbs');
}

function byu_theme_preprocess_html(&$variables) {
  global $base_url;
  $theme_root = $base_url.'/'.drupal_get_path('theme','byu_theme');
  $variables['theme_root'] = $theme_root;

  $current_path = \Drupal::service('path.current')->getPath();
  $path_args = explode('/', $current_path);
  $variables['arg'] = $path_args[1];
  $variables['layout_option'] = theme_get_setting('layout_option');
  $variables['header_option'] = theme_get_setting('header_option');
  $variables['h_semi_transparent_option'] = theme_get_setting('h_semi_transparent_option');
  $variables['skin_option'] = theme_get_setting('skin_option');
  $variables['loader'] = theme_get_setting('loader');
  $variables['your_css'] = theme_get_setting('your_css');

  // general page
  $full_width = 'full-width-' . theme_get_setting('full_width');
  $min_page_height = 'min-height-' . theme_get_setting('min_page_height');
  $variables['attributes']['class'][] = 'body';

  $font_one = "h1-" . theme_get_setting('font_one');
  $font_two = "h2-" . theme_get_setting('font_two');
  $font_three = "h3-" . theme_get_setting('font_three');
  $font_four = "h4-" . theme_get_setting('font_four');
  $font_five = "h5-" . theme_get_setting('font_five');
  $font_one_color = theme_get_setting('font_one_color');
  $font_two_color = theme_get_setting('font_two_color');
  $font_three_color = theme_get_setting('font_three_color');
  $font_four_color = theme_get_setting('font_four_color');
  $font_five_color = theme_get_setting('font_five_color');
  $p_font = "p-" . theme_get_setting('p_font');

  $variables['attributes'] = new Attribute($variables['attributes']);
  $variables['attributes']->addClass([$font_one, $font_two, $font_three, $font_four, $font_five, $font_one_color, $font_two_color, $font_three_color, $font_four_color, $font_five_color, $p_font]);

  // Determine whether or not this page is the homepage/front page. Add the appropriate class.
  if (\Drupal::service('path.matcher')->isFrontPage()) {
    $thisPage = 'front';
  }
  else {
    $thisPage = 'not-front';
  }
  $variables['attributes']->addClass($thisPage);

  // Get currently active user and his/her roles, user ID and whether or not this page is a user page.
  $account = \Drupal::currentUser();
  if ($variables['root_path'] == 'user') {
    $variables['attributes']['class'][] = 'user-page';
    $userId = $account->id();
    $variables['attributes']['class'][] = 'user-id-' . $userId;
  }
  $roles = $account->getRoles();
  foreach ($roles as $role) {
    $variables['attributes']['class'][] = 'role-' . $role;
  }

  // Use the class term-# on term pages.

  if ($variables['root_path'] == 'taxonomy') {
    $vocab_names = taxonomy_vocabulary_get_names();
    foreach ($vocab_names as $vocabulary) {
      $query = \Drupal::entityQuery('taxonomy_term');
      $query->condition('vid', $vocabulary);
      $tids = $query->execute();
      $terms = Term::loadMultiple($tids);
      foreach ($terms as $term) {
        if (taxonomy_term_is_page($term)) {
          $termId = $term->id();
          $termId = 'term-' . $termId;
          $variables['attributes']->addClass($termId);
        }
      }
    }
  }

  // Shows content type of the page. Also gives
  $node = \Drupal::request()->attributes->get('node');
  if ($node) {
    if ($node instanceof Drupal\node\NodeInterface) {
      $nodeId = $node->id();
      $nodeId = "node-" . $nodeId;
      $variables['attributes']->addClass($nodeId);
    }
    $contentType = $node->bundle();
    $contentType = str_replace("_", "-", $contentType);
    $contentType = "type-" . $contentType;
    $variables['attributes']->addClass($contentType);
  }


}

/**
 * Implements hook_preprocess_user().
 */
function byu_theme_preprocess_user(&$variables) {
  /** @var User $account */
  $account = $variables['elements']['#user'];

  $variables['username'] = $account->getDisplayName();
}
function byu_theme_preprocess_block(&$variables) {

}
function byu_theme_preprocess_region(&$variables) {

}
